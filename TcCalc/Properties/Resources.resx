<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Background" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\pic.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="UpdateAvailable" xml:space="preserve">
    <value>该版本的元素描述文件有更新了，需要下载吗？</value>
  </data>
  <data name="Prompt" xml:space="preserve">
    <value>提示</value>
  </data>
  <data name="UpdateCompleted" xml:space="preserve">
    <value>操作完成！</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>成功</value>
  </data>
  <data name="AspectDescriptionFileVersion" xml:space="preserve">
    <value>元素描述文件版本：</value>
  </data>
  <data name="StepRequested" xml:space="preserve">
    <value>请输入步数哦</value>
  </data>
  <data name="CheckAspect" xml:space="preserve">
    <value>选择的元素有错误，请确认开始及结束元素都选择了一个哦</value>
  </data>
  <data name="StartEndAspectRequested" xml:space="preserve">
    <value>不能排除起始元素和结束元素哦，请确认一下排除元素列表</value>
  </data>
  <data name="StepShouldBePositiveNum" xml:space="preserve">
    <value>步数太小了，请确保步数在0以上哦</value>
  </data>
  <data name="StepTooBig" xml:space="preserve">
    <value>步数太大了，神秘时代4没有步数9以上的连接哦，确定要继续计算吗？【时间可能会非常长】</value>
  </data>
  <data name="CannotFindLink" xml:space="preserve">
    <value>貌似没有可以连接的方法呢，是否增大一步来尝试连接呢？</value>
  </data>
  <data name="CannotFindLink_" xml:space="preserve">
    <value>没有找到连接方法</value>
  </data>
  <data name="SelectedUp" xml:space="preserve">
    <value>↑已选择：</value>
  </data>
  <data name="NullAspect" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="SelectedDown" xml:space="preserve">
    <value>↓已选择：</value>
  </data>
  <data name="CloseAdvance" xml:space="preserve">
    <value>↑收起高级选项↑</value>
  </data>
  <data name="OpenAdvance" xml:space="preserve">
    <value>↓展开高级选项↓</value>
  </data>
  <data name="SelectedAspect" xml:space="preserve">
    <value>已选择：</value>
  </data>
  <data name="CalculationError" xml:space="preserve">
    <value>计算错误咯！【是不是步数写错了呢？】</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="NoResult" xml:space="preserve">
    <value>至少应当存在一个结果</value>
  </data>
  <data name="ResultWindowTitle" xml:space="preserve">
    <value>共有 {0} 组结果，步数为 {1}</value>
  </data>
  <data name="StepShouldBeNumber" xml:space="preserve">
    <value>步数不是数字哦</value>
  </data>
  <data name="InvalidAspectDescription" xml:space="preserve">
    <value>于第 {0} 行遇到无效的元素描述</value>
  </data>
  <data name="InvalidSettingFile" xml:space="preserve">
    <value>无效的设置文件</value>
  </data>
</root>